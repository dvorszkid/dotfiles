#!/usr/bin/env python2

# NFOview - Viewer for NFO files
# Copyright (C) 2005-2006 Osmo Salomaa
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc., 51
# Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.


"""Viewer for NFO files."""


import codecs
import gtk
import os
import optparse
import pango
import sys


__author__  = 'Osmo Salomaa <otsaloma@cc.hut.fi>'
__version__ = '0.1.2'

CONFIG_FILE = os.path.join(os.path.expanduser('~'), '.nfoview')


class conf(object):

    """Configuration variables."""

    bg_color   = '#ffffff'
    browser    = 'opera --newpage'
    fg_color   = '#000000'
    font       = 'Lucida ConsoleP,monospace 9'
    icon       = 'gnome-status'
    url_color  = '#0000ff'
    vurl_color = '#ff00ff'


class NFOview(object):

    """Viewer for NFO files."""

    def __init__(self, path):

        self.path      = path
        self.text      = ''
        self.text_view = gtk.TextView()
        self.urls      = []
        self.window    = gtk.Window()

        self.read_conf()
        self.read_file()
        self.init_text_view()
        self.init_window()
        self.insert_text()
        self.init_window_size()

        self.window.show_all()
        self.text_view.grab_focus()

    def init_text_view(self):
        """Initialize the text view and related widgets."""

        font_desc = pango.FontDescription(conf.font)
        bg_color = gtk.gdk.color_parse(conf.bg_color)
        fg_color = gtk.gdk.color_parse(conf.fg_color)

        self.text_view.set_cursor_visible(False)
        self.text_view.set_editable(False)
        self.text_view.set_wrap_mode(gtk.WRAP_NONE)
        self.text_view.set_pixels_above_lines(-1)
        self.text_view.modify_base(gtk.STATE_NORMAL, bg_color)
        self.text_view.modify_text(gtk.STATE_NORMAL, fg_color)
        self.text_view.modify_font(font_desc)

    def init_window(self):
        """Initialize the window and the scrolled window."""

        scrolled_window = gtk.ScrolledWindow()
        scrolled_window.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
        scrolled_window.set_shadow_type(gtk.SHADOW_ETCHED_IN)
        scrolled_window.add(self.text_view)

        self.window.set_border_width(2)
        self.window.set_title(os.path.basename(self.path))
        self.window.set_position(gtk.WIN_POS_CENTER)
        self.window.connect('delete_event', self.on_quit)
        self.window.add(scrolled_window)
        self.window.set_icon_name(conf.icon)

        # Add Ctrl+W as an accelerator to close the window.
        accel_group = gtk.AccelGroup()
        accel_group.connect_group(
            119, gtk.gdk.CONTROL_MASK, gtk.ACCEL_MASK, self.on_quit)
        self.window.add_accel_group(accel_group)

    def init_window_size(self):
        """Initialize the size of the window."""

        font_desc = pango.FontDescription(conf.font)
        label = gtk.Label(self.text)
        attrs = pango.AttrList()
        attrs.insert(pango.AttrFontDesc(font_desc, 0, -1))
        label.set_attributes(attrs)
        width, height = label.size_request()

        width  = min(width  + 60, int(0.7 * gtk.gdk.screen_width()))
        height = min(height + 60, int(0.7 * gtk.gdk.screen_height()))
        self.window.set_default_size(width, height)

    def insert_text(self):
        """Insert text into the text view."""

        lines = self.text.split('\n')
        for i, line in enumerate(lines):
            words = line.split(' ')
            for j, word in enumerate(words):
                if word.count('://'):
                    k = word.index('://')
                    while k > 0 and word[k - 1].isalnum():
                        k -= 1
                    self.insert_word(word[:k])
                    self.insert_url(word[k:])
                elif word.count('www.'):
                    k = word.index('www.')
                    self.insert_word(word[:k])
                    self.insert_url(word[k:])
                else:
                    self.insert_word(word)
                if j < range(len(words))[-1]:
                    self.insert_word(' ')
            if i < range(len(lines))[-1]:
                self.insert_word('\n')

    def insert_url(self, url):
        """Insert url into the text view."""

        text_buffer = self.text_view.get_buffer()
        name = str(len(self.urls))
        tag = text_buffer.create_tag(name)
        tag.props.foreground_gdk = gtk.gdk.color_parse(conf.url_color)
        tag.props.underline = pango.UNDERLINE_SINGLE
        tag.connect('event', self.on_text_buffer_tag_event)

        self.urls.append(url)
        self.insert_word(url, name)

    def insert_word(self, word, *tags):
        """Insert word into the text view with tags."""

        text_buffer = self.text_view.get_buffer()
        itr = text_buffer.get_end_iter()
        text_buffer.insert_with_tags_by_name(itr, word, *tags)

    def on_text_buffer_tag_event(self, tag, widget, event, itr):
        """Lauch browser and color URL visited."""

        if event.type == gtk.gdk.BUTTON_RELEASE:
            url = self.urls[int(tag.props.name)]
            os.system('%s "%s" &' % (conf.browser, url))
            tag.props.foreground_gdk = gtk.gdk.color_parse(conf.vurl_color)

    def on_quit(self, *args):
        """Save configuration and exit."""

        self.write_conf()
        gtk.main_quit()

    def read_conf(self):
        """Read configuration file."""

        if not os.path.isfile(CONFIG_FILE):
            return
        fobj = open(CONFIG_FILE, 'r')
        lines = list(x.strip() for x in fobj.readlines())
        fobj.close()

        for line in lines:
            try:
                name, value = line.split('=')
                setattr(conf, name, value)
            except Exception:
                pass

    def read_file(self):
        """Read NFO file's text."""

        fobj = codecs.open(self.path, 'r', 'cp437')
        lines = list(x.rstrip() for x in fobj.readlines())
        fobj.close()

        # Discard blank lines at the end.
        while not lines[-1]:
            lines.pop()

        # Split lines to odd and even ones.
        odd_lines = []
        for i in range(0, len(lines), 2):
            odd_lines.append(lines[i])
        even_lines = []
        for i in range(1, len(lines), 2):
            even_lines.append(lines[i])

        # Discard either odd or even lines if they're all blank.
        if not sum(list(len(x.strip()) for x in odd_lines)):
            lines = even_lines
        if not sum(list(len(x.strip()) for x in even_lines)):
            lines = odd_lines

        self.text = '\n'.join(lines)

    def write_conf(self):
        """Write configuration file."""

        fobj = open(CONFIG_FILE, 'w')
        for name in dir(conf):
            if not name.startswith('_'):
                fobj.write('%s=%s\n' % (name, getattr(conf, name)))
        fobj.close()


ARGS = optparse.OptionParser(
    description="View NFO files.",
    formatter=optparse.IndentedHelpFormatter(2, 42, None, True),
    usage='nfoview FILE',
    version='nfoview %s' % __version__,
).parse_args(sys.argv)[1]

if len(ARGS) > 1:
    NFOview(ARGS[1])
    gtk.main()
